plugins {
    id 'org.springframework.boot' version '2.3.12.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id "au.com.dius.pact" version "4.1.7"
}

group 'kl.v2x'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'au.com.dius.pact.consumer:java8:4.1.7'
    testImplementation 'au.com.dius.pact.consumer:junit5:4.1.7'
}

task copyPacts(type: Copy) {
    description 'Copies the generated Pact json file to the provider resources directory'

    from('build/pacts/')
    into('../provider-service/src/test/resources/pacts/')
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

pact {
    publish {
        pactDirectory = 'build/pacts'
        pactBrokerUrl = mybrokerUrl
        pactBrokerUsername = mybrokerUser
        pactBrokerPassword = mybrokerPassword
    }
}

test {
    useJUnitPlatform()
}